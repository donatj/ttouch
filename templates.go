// Code generated by go-bindata.
// sources:
// templates/go.js
// templates/md.js
// templates/php.js
// templates/sh.js
// DO NOT EDIT!

package ttouch

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcf\xcd\x4e\x84\x30\x10\x07\xf0\x3b\x4f\xf1\x77\x62\x36\x45\x12\xd0\x33\xe9\x55\x4f\x5e\x3c\x78\x59\xd6\xa4\xd6\x2e\xdb\x6c\x19\x36\x50\xd4\xc4\xec\xbb\x9b\x82\x43\x76\x13\x39\x90\x76\x3e\x7e\x9d\xa1\x69\x74\x18\xe3\xe0\x6d\xa4\x3a\x53\xfb\x89\x6d\xf4\x3d\x43\xe5\xf8\xc9\x00\xe0\xd3\x0c\x70\xdf\x7e\x8c\x9e\x5b\x68\x3c\x85\xfe\x5d\xd1\x5d\xd9\xf6\x94\xd7\x6b\xc1\xe9\x98\x72\xd4\x19\xcf\xb4\x44\xfd\x1e\x6a\x6d\xdb\x6c\x56\xa2\x0c\x8e\xdb\x78\x10\x5d\x00\xdb\x73\x74\x1c\xa1\xf1\xe2\xcc\xc7\xa3\x0f\x6e\xed\xde\xde\xef\xfe\x5e\x12\x57\x8a\x6f\xb4\x06\x4f\x21\x5c\x62\x02\x76\x26\xda\x03\xb4\xc0\xe5\x7c\x57\xd5\xdb\xc9\xd8\xa3\x69\x1d\x54\xf3\x55\xe4\xb7\x55\x77\x41\x0b\xbf\xb4\x0a\x9e\x86\x9f\x23\xff\x4c\x2e\xdf\xb2\xfe\x5c\xb5\x7d\xd8\x5d\x8b\xe7\xec\xfa\xb4\xfc\x07\x17\xa7\x81\x41\x55\x05\x42\x81\xd7\xe7\x32\xed\xcc\xa6\x73\x28\x40\x0d\x37\x2c\x83\xa6\x74\xf2\xe7\x30\xd5\xd9\x39\x57\x79\x9d\xfd\x06\x00\x00\xff\xff\xa2\xa8\x08\x0b\xb7\x01\x00\x00"

func goJsBytes() ([]byte, error) {
	return bindataRead(
		_goJs,
		"go.js",
	)
}

func goJs() (*asset, error) {
	bytes, err := goJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go.js", size: 439, mode: os.FileMode(420), modTime: time.Unix(1529980018, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mdJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8c\xb1\x6a\xc3\x30\x18\x84\x77\x3d\xc5\xa1\x2e\x12\xa6\x72\xe9\x2a\x3c\x74\xe9\x56\x28\x14\xba\x58\x1e\x54\xa3\xda\x02\xe5\x97\x91\x7e\x67\x09\x79\xf7\x60\x0b\xb2\xdc\x70\xf7\xdd\x27\xf7\x1a\x50\xb9\xc4\x99\xa5\x15\xea\x7f\xa7\x99\x63\x26\x28\x8d\x9b\x00\x80\xab\x2f\xd8\x7c\xe1\x8a\x01\x3f\x5b\x8a\xfc\xed\x79\x55\xbf\x5f\xe6\xe3\xaf\x7e\xc6\x14\xc8\x5f\x82\x1e\xdf\x26\x53\x8f\x51\xf5\xa3\xeb\x9d\x9b\xfa\x45\xdb\xe7\xfd\x40\x30\x34\xcb\x78\xa6\x49\x81\x16\x5e\xf1\x8a\xf7\xa9\x71\x73\xa6\x9a\x53\x30\x29\x2f\xea\x54\xb6\xba\x04\xde\x0b\x41\xbe\x40\xa2\x6b\xa2\x0e\xd2\x91\x23\x69\xc5\x5d\x2b\x6d\xc5\x23\x00\x00\xff\xff\x01\xa5\x01\x62\xc2\x00\x00\x00"

func mdJsBytes() ([]byte, error) {
	return bindataRead(
		_mdJs,
		"md.js",
	)
}

func mdJs() (*asset, error) {
	bytes, err := mdJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "md.js", size: 194, mode: os.FileMode(420), modTime: time.Unix(1529980018, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _phpJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x5d\x6b\xdb\x3c\x14\xbe\xcf\xaf\x38\xd5\x5b\x8a\x5c\xbf\xb3\x3b\xe8\x9d\xa7\x95\xc1\xd6\x8b\x41\xd7\xb2\xb2\xdd\xd8\x1e\x28\x8e\x9c\x68\xb3\x65\xa1\x23\x17\x43\x97\xff\x3e\xe4\xaf\xca\x69\x03\xdd\x7c\x11\x12\xeb\xf9\xd0\x79\xa4\x27\xa4\x45\x01\x68\x8d\x2c\x2c\x49\x56\x65\xab\x0a\x2b\x1b\x05\x5b\x61\xef\xd0\xdc\x70\x4d\x03\x78\x5c\x01\x00\x3c\x70\x03\x0a\x11\x18\x3c\xee\x93\xf9\x8d\xb4\xa2\x76\xef\xee\x0b\xae\xbe\x69\x4a\x8a\xa6\xd6\x0d\x0a\x13\xfd\xc4\x46\x91\x60\x00\xca\x12\x68\x0f\x8c\x2a\xa1\xb6\x76\x07\xef\xe1\x62\x92\x9d\x84\x26\xe2\x1d\xb7\x3b\x60\x83\x6e\x7a\x91\x27\x2f\x82\x3e\x4a\xe3\x3c\x75\x25\xad\xc3\x53\x9f\x1c\xbc\xc0\x52\x56\x28\x0b\x0c\xbe\x0a\xbe\xb9\x96\x95\x58\x12\x9e\xd0\x6e\xa3\x13\xfa\x84\x31\x50\x6d\x55\xf9\x1b\x9d\x15\xdd\x74\xc0\xe0\xf3\xfd\xed\x97\x48\x73\x83\x62\xa2\x79\x62\xb3\xa0\x03\x47\xbc\xb5\x4d\xd5\xf0\x0d\x9c\x9d\xc1\xf2\x4d\x4a\x34\x9a\x37\x17\x24\x3f\x74\x72\x4f\xd9\x18\xa0\xce\xb2\x03\xa9\xfe\x86\xe8\x1e\x85\x98\xfa\x91\x85\xc7\x04\xd2\x2e\xcf\x81\x01\x21\xc9\x33\x9d\xfd\xea\xf8\xaf\xd7\x4f\x77\xf9\xaf\xd3\x1d\x21\xbe\x7e\xba\xcb\x79\xba\xee\xf5\xc3\x0d\xdf\x86\x4f\x23\x6c\x6b\x94\x73\x4b\x56\xfb\xa7\x82\x58\x23\xeb\xfb\x8a\xe3\x4e\x20\xc5\x69\x8b\x23\x16\x23\x23\x74\xc5\x0b\x41\x63\xfa\x23\xcb\xc2\xe0\x37\xcd\xb2\xf0\x34\x88\xb7\xff\x03\x71\xa5\xd8\xaf\xe8\x2c\xb4\x28\x58\xcd\x35\x30\xbf\x7c\x89\xd7\x3d\xef\x84\xe6\xe0\x6a\x17\x5c\xcd\xb5\x1f\x92\x3b\x96\xef\x37\xd1\x87\x35\xba\xbb\xae\x78\x2d\x22\xa9\x36\xa2\xbb\x2d\x69\x1d\x00\x63\x6c\xd9\xbe\xc9\x60\x73\x50\xaa\xa5\xc4\xb2\x56\x13\x07\xdb\xb2\x94\x1d\x30\x47\x8e\xb0\x5d\xa3\x35\xb4\x1e\x5b\x1e\x78\x29\x44\xe7\x57\x41\x9a\xc5\xf9\xf9\x69\x9f\xc1\xe9\x5b\xe2\xad\xa6\x59\x9c\x65\x79\xd8\xaf\x64\x19\x09\x9e\xdb\x68\x23\x06\x1b\x3f\xf5\x9a\xeb\xb4\xce\x0f\xd0\x7d\x4a\x3e\x6a\xa4\x86\xbd\x34\x84\xe3\x8e\x0f\x58\x6b\x23\xf8\xaf\xe4\xc5\xe3\x77\xf6\x46\x60\x5b\x59\x2f\xfe\x31\xe1\xeb\x8a\x6f\x31\xfa\xd4\x89\xa2\xb5\x7c\x5d\x09\x3f\xd5\x91\x13\x32\x20\xff\x9d\xc4\x2d\x9a\x78\x2d\x55\x2c\xd4\x03\xe8\x9d\xce\xd4\x28\x34\x5d\xb1\x19\xfb\xee\xaa\x5f\x9e\x01\xce\x49\x61\xff\x67\x44\xc8\x11\x7d\x77\x3c\xa8\x79\x21\xc0\x0d\xa8\xd0\x0d\x9b\x78\x1a\x8b\x7b\x3c\xf0\x92\xd5\x3e\x70\x97\xeb\x4f\x00\x00\x00\xff\xff\xcb\x97\x16\x4c\xfe\x05\x00\x00"

func phpJsBytes() ([]byte, error) {
	return bindataRead(
		_phpJs,
		"php.js",
	)
}

func phpJs() (*asset, error) {
	bytes, err := phpJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "php.js", size: 1534, mode: os.FileMode(420), modTime: time.Unix(1529980018, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x2a\x2d\x4e\x55\x28\x2e\x29\xca\x4c\x2e\x51\xb2\xe6\x52\x52\x56\xd4\x4f\xca\xcc\xd3\x2f\xce\x88\xc9\x2b\x4e\x2d\x51\xd0\x4d\x8d\xc9\x8b\xc9\x53\xb2\xe6\x02\x04\x00\x00\xff\xff\x3b\x36\xcd\x4e\x27\x00\x00\x00"

func shJsBytes() ([]byte, error) {
	return bindataRead(
		_shJs,
		"sh.js",
	)
}

func shJs() (*asset, error) {
	bytes, err := shJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sh.js", size: 39, mode: os.FileMode(420), modTime: time.Unix(1529980018, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go.js": goJs,
	"md.js": mdJs,
	"php.js": phpJs,
	"sh.js": shJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"go.js": &bintree{goJs, map[string]*bintree{}},
	"md.js": &bintree{mdJs, map[string]*bintree{}},
	"php.js": &bintree{phpJs, map[string]*bintree{}},
	"sh.js": &bintree{shJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

