// Code generated by go-bindata.
// sources:
// templates/go.js
// templates/php.js
// DO NOT EDIT!

package ttouch

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcf\xcd\x4e\x84\x30\x10\x07\xf0\x3b\x4f\xf1\x77\x62\x36\x45\x12\xd0\x33\xe9\x55\x4f\x5e\x3c\x78\x59\xd6\xa4\xd6\x2e\xdb\x6c\x19\x36\x50\xd4\xc4\xec\xbb\x9b\x82\x43\x76\x13\x39\x90\x76\x3e\x7e\x9d\xa1\x69\x74\x18\xe3\xe0\x6d\xa4\x3a\x53\xfb\x89\x6d\xf4\x3d\x43\xe5\xf8\xc9\x00\xe0\xd3\x0c\x70\xdf\x7e\x8c\x9e\x5b\x68\x3c\x85\xfe\x5d\xd1\x5d\xd9\xf6\x94\xd7\x6b\xc1\xe9\x98\x72\xd4\x19\xcf\xb4\x44\xfd\x1e\x6a\x6d\xdb\x6c\x56\xa2\x0c\x8e\xdb\x78\x10\x5d\x00\xdb\x73\x74\x1c\xa1\xf1\xe2\xcc\xc7\xa3\x0f\x6e\xed\xde\xde\xef\xfe\x5e\x12\x57\x8a\x6f\xb4\x06\x4f\x21\x5c\x62\x02\x76\x26\xda\x03\xb4\xc0\xe5\x7c\x57\xd5\xdb\xc9\xd8\xa3\x69\x1d\x54\xf3\x55\xe4\xb7\x55\x77\x41\x0b\xbf\xb4\x0a\x9e\x86\x9f\x23\xff\x4c\x2e\xdf\xb2\xfe\x5c\xb5\x7d\xd8\x5d\x8b\xe7\xec\xfa\xb4\xfc\x07\x17\xa7\x81\x41\x55\x05\x42\x81\xd7\xe7\x32\xed\xcc\xa6\x73\x28\x40\x0d\x37\x2c\x83\xa6\x74\xf2\xe7\x30\xd5\xd9\x39\x57\x79\x9d\xfd\x06\x00\x00\xff\xff\xa2\xa8\x08\x0b\xb7\x01\x00\x00"

func goJsBytes() ([]byte, error) {
	return bindataRead(
		_goJs,
		"go.js",
	)
}

func goJs() (*asset, error) {
	bytes, err := goJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go.js", size: 439, mode: os.FileMode(420), modTime: time.Unix(1529959718, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _phpJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\x31\x0b\xc2\x30\x10\x05\xe0\x3d\xbf\xe2\x79\x2e\x29\x42\xfb\x03\xa2\x38\xe9\xe6\xea\xd4\xa5\x0d\xa9\x06\xc2\x59\x92\xbb\x22\x48\xff\xbb\x58\x2b\xde\x78\xef\x7d\x8f\xb4\x04\x14\xc9\xd1\x0b\x39\x63\x07\x65\x2f\xf1\xc1\xb0\x15\x5e\x06\x00\xa6\x2e\x23\x87\xa2\x49\x70\x00\x91\x5b\x9e\x71\x80\xbd\x5e\xea\x73\xea\x6e\xa5\x3e\x3d\x83\x57\xe9\xfa\x14\x7e\xe6\x73\x7f\xb3\xdd\x34\x5a\x72\xd3\x47\x6e\x02\x4f\x18\xef\x63\xcb\xeb\xce\x6c\xbe\x55\xd1\xcc\xa0\xfd\x71\xc9\x5a\x26\xec\x56\xef\xcc\x5c\xd9\xca\x99\x77\x00\x00\x00\xff\xff\xa9\xfe\xeb\xc8\xa7\x00\x00\x00"

func phpJsBytes() ([]byte, error) {
	return bindataRead(
		_phpJs,
		"php.js",
	)
}

func phpJs() (*asset, error) {
	bytes, err := phpJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "php.js", size: 167, mode: os.FileMode(420), modTime: time.Unix(1529959718, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go.js": goJs,
	"php.js": phpJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"go.js": &bintree{goJs, map[string]*bintree{}},
	"php.js": &bintree{phpJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

